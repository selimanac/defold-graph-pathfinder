name: Build with bob

on:
  workflow_call:
    inputs:
      ubuntu_runner:
        required: false
        type: string
        description: "Which Ubuntu runner should use"
        default: ubuntu-latest
      macos_runner:
        required: false
        type: string
        description: "Which MacOS runner should use"
        default: macOS-latest
      windows_runner:
        required: false
        type: string
        description: "Which Windows runner should use"
        default: windows-latest
      build_server:
        required: false
        type: string
        description: "Build server url"
        default: "https://build-stage.defold.com"
      channel:
        required: false
        type: string
        description: "Which Defold version use to build. Possible values: alpha, beta, stable"
        default: alpha
      bob_version_filename:
        required: false
        type: string
        description: "JSON filename withi Bob versions"
        default: "info.json"
      additonal_build_options:
        required: false
        type: string
        description: "Additional options passed to build command"
        default: "--archive"
      additonal_bundle_options:
        required: false
        type: string
        description: "Additional options passed to bundle command"
      ignored_platforms:
        required: false
        type: string
        description: "JSON-like string with list of ignored platforms" # [{"platform": "wasm_pthread-web"}, {"platform": "js-web"}]
        default: "[]"

jobs:
  build_with_bob:
    strategy:
      matrix:
        platform: [armv7-android, arm64-android, x86_64-linux, arm64-linux, js-web, wasm-web, wasm_pthread-web]
        exclude: ${{ fromJSON(inputs.ignored_platforms) }}
      fail-fast: false
    runs-on: ${{ inputs.ubuntu_runner }}
    name: Build
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/setup-java@v5
        with:
          java-version: "25"
          architecture: x64
          distribution: "temurin"

      - name: Get Defold version
        id: defold_version
        run: |
          TMPVAR=`curl -s http://d.defold.com/${{ inputs.channel }}/${{ inputs.bob_version_filename }} | jq -r '.sha1'`
          echo "defold_version=${TMPVAR}" >> $GITHUB_OUTPUT
          echo "Found version ${TMPVAR}"

      - name: Download bob.jar
        run: |
          wget -q http://d.defold.com/archive/${{ inputs.channel }}/${{ steps.defold_version.outputs.defold_version }}/bob/bob.jar
          java -jar bob.jar --version

      - name: Installing Shared Library Dependencies
        run: |
          echo "Remove after we've fixed the headless build for plugins"
          sudo apt-get update
          sudo apt-get install -y libopenal-dev freeglut3-dev libgl-dev libglx-dev libegl-dev zip unzip file

      - name: Resolve libraries
        run: java -jar bob.jar resolve

      - name: Build
        run: |
          # For Android targets, disable strip during build to avoid strip-related failures
          if [[ "${{ matrix.platform }}" == "armv7-android" || "${{ matrix.platform }}" == "arm64-android" ]]; then
            echo "Building (no strip) for ${{ matrix.platform }}"
            java -jar bob.jar --platform=${{ matrix.platform }} --architectures ${{ matrix.platform }} build --build-server=${{ inputs.build_server }} ${{ inputs.additonal_build_options }} --strip-executable false
          else
            echo "Building for ${{ matrix.platform }}"
            java -jar bob.jar --platform=${{ matrix.platform }} --architectures ${{ matrix.platform }} build --build-server=${{ inputs.build_server }} ${{ inputs.additonal_build_options }}
          fi
        shell: bash

      - name: Inspect build output (debug)
        run: |
          set -euo pipefail
          BUILD_DIR="build/default/defoldgraphpathfinder/aab/base"
          echo "=== Inspecting build output ==="
          if [ -d "$BUILD_DIR" ]; then
            echo "Listing $BUILD_DIR (recursive):"
            find "$BUILD_DIR" -ls || true
            echo
            echo "Sizes and permissions (first 200 entries):"
            find "$BUILD_DIR" -type f -print0 | xargs -0 -n1 ls -lh | head -n 200 || true
            echo
            echo "File types for first 20 files:"
            find "$BUILD_DIR" -type f | head -n 20 | xargs -r file || true
            echo
            echo "Sample .so checks:"
            find "$BUILD_DIR" -name '*.so' -ls || true
          else
            echo "$BUILD_DIR does not exist. Listing build/default:"
            ls -la build/default || true
          fi
        shell: bash

      - name: Bundle
        run: |
          echo "PLATFORM: ${{ matrix.platform }}"
          echo "Contents to be bundled (top-level):"
          find build/default -maxdepth 5 -ls || true
          if [[ "${{ matrix.platform }}" == "armv7-android" || "${{ matrix.platform }}" == "arm64-android" ]]; then
            echo "CMD: java -jar bob.jar --platform=${{ matrix.platform }} --architectures ${{ matrix.platform }} bundle ${{ inputs.additonal_bundle_options }} --strip-executable false"
            java -jar bob.jar --platform=${{ matrix.platform }} --architectures ${{ matrix.platform }} bundle ${{ inputs.additonal_bundle_options }} --strip-executable false
          else
            echo "CMD: java -jar bob.jar --platform=${{ matrix.platform }} --architectures ${{ matrix.platform }} bundle ${{ inputs.additonal_bundle_options }}"
            java -jar bob.jar --platform=${{ matrix.platform }} --architectures ${{ matrix.platform }} bundle ${{ inputs.additonal_bundle_options }}
          fi
        shell: bash

  build_with_bob_windows:
    strategy:
      matrix:
        platform: [x86_64-win32, x86-win32]
        exclude: ${{ fromJSON(inputs.ignored_platforms) }}
      fail-fast: false
    runs-on: ${{ inputs.windows_runner }}
    name: Build
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/setup-java@v5
        with:
          java-version: "25"
          architecture: x64
          distribution: "temurin"

      - name: Get Defold version
        id: defold_version
        run: |
          TMPVAR=`curl -s http://d.defold.com/${{ inputs.channel }}/${{ inputs.bob_version_filename }} | jq -r '.sha1'`
          echo "defold_version=${TMPVAR}" >> $GITHUB_OUTPUT
          echo "Found version ${TMPVAR}"
        shell: bash

      - name: Download bob.jar
        run: |
          curl -s -o bob.jar http://d.defold.com/archive/${{ inputs.channel }}/${{ steps.defold_version.outputs.defold_version }}/bob/bob.jar
          java -jar bob.jar --version

      - name: Resolve libraries
        run: java -jar bob.jar resolve
      - name: Build
        run: java -jar bob.jar --platform=${{ matrix.platform }} --architectures ${{ matrix.platform }} build --build-server=${{ inputs.build_server }} ${{ inputs.additonal_build_options }}
      - name: Bundle
        run: java -jar bob.jar --platform=${{ matrix.platform }} --architectures ${{ matrix.platform }} bundle ${{ inputs.additonal_bundle_options }}

  build_with_bob_macos:
    strategy:
      matrix:
        platform: [arm64-macos, x86_64-macos, arm64-ios]
        exclude: ${{ fromJSON(inputs.ignored_platforms) }}
      fail-fast: false
    runs-on: ${{ inputs.macos_runner }}
    name: Build
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/setup-java@v5
        with:
          java-version: "25"
          architecture: x64
          distribution: "temurin"

      - name: Get Defold version
        id: defold_version
        run: |
          TMPVAR=`curl -s http://d.defold.com/${{ inputs.channel }}/${{ inputs.bob_version_filename }} | jq -r '.sha1'`
          echo "defold_version=${TMPVAR}" >> $GITHUB_OUTPUT
          echo "Found version ${TMPVAR}"

      - name: Download bob.jar
        run: |
          wget -q http://d.defold.com/archive/${{ inputs.channel }}/${{ steps.defold_version.outputs.defold_version }}/bob/bob.jar
          java -jar bob.jar --version

      - name: Resolve libraries
        run: java -jar bob.jar resolve
      - name: Build
        run: java -jar bob.jar --platform=${{ matrix.platform }} --architectures ${{ matrix.platform }} build --build-server=${{ inputs.build_server }} ${{ inputs.additonal_build_options }}
      - name: Bundle
        run: java -jar bob.jar --platform=${{ matrix.platform }} --architectures ${{ matrix.platform }} bundle ${{ inputs.additonal_bundle_options }}
