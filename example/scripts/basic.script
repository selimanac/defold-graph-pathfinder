-- Basic Pathfinder Example
-- This script demonstrates the core features of the pathfinder API including:
-- - Initializing the pathfinder system
-- - Creating nodes and edges
-- - Finding paths between nodes
-- - Path smoothing (manual and automatic)
-- - Projected pathfinding

-- Variables for pathfinding results
local path_length   = 0
local status        = 0
local status_text   = ""
local entry_point   = vmath.vector3()
local exit_point    = vmath.vector3()
local path          = {}

-- Node identifiers for pathfinding
local start_id      = 0
local goal_id       = 0

-- Path smoothing configuration using Bezier quadratic curves
local smooth_config = {
	style = pathfinder.PathSmoothStyle.BEZIER_QUADRATIC,
	bezier_sample_segment = 8, -- Number of segments per curve
	bezier_curve_radius = 0.8 -- Radius factor for curve smoothness

	--	bezier_control_point_offset         = 0.4, -- For bezier_cubic style
	--	bezier_adaptive_tightness           = 0.5, -- For bezier_adaptive style
	--	bezier_adaptive_roundness           = 0.5, -- For bezier_adaptive style
	--	bezier_adaptive_max_corner_distance = 50.0, -- For bezier_adaptive style
	--	bezier_arc_radius                   = 40.0 -- For circular_arc style
}

function init(self)
	-- Initialize the pathfinder system
	-- Parameters: max_nodes, max_gameobject_nodes, max_edges_per_node, heap_pool_block_size, max_cache_path_length
	pathfinder.init(32, nil, 4, 32, 4)

	-- Create nodes in batch
	-- This is more efficient than creating nodes one by one
	local nodes = pathfinder.add_nodes({
		{ x = 100, y = 100 },
		{ x = 200, y = 200 },
		{ x = 300, y = 200 },
		{ x = 400, y = 100 }
	})

	-- Create edges connecting the nodes
	-- Bidirectional edges allow pathfinding in both directions
	pathfinder.add_edges({
		{ from_node_id = nodes[1], to_node_id = nodes[2], bidirectional = true },
		{ from_node_id = nodes[2], to_node_id = nodes[3], bidirectional = true },
		{ from_node_id = nodes[3], to_node_id = nodes[4], bidirectional = true }
	})

	-- Example 1: Basic pathfinding
	-- Find a path from the first node to the last node
	start_id = nodes[1]
	goal_id = nodes[4]
	path_length, status, status_text, path = pathfinder.find_node_to_node(start_id, goal_id, 8)

	if status == pathfinder.PathStatus.SUCCESS then
		print("Path found with", path_length, "waypoints")
		for i, waypoint in ipairs(path) do
			print(string.format("Waypoint %d: (%.1f, %.1f)", i, waypoint.x, waypoint.y))
		end
	else
		print("Pathfinding failed:", status_text)
	end

	-- Example 2: Manual path smoothing
	-- First, create a smoothing configuration and get its ID
	local smooth_id = pathfinder.add_path_smoothing(smooth_config)

	-- Apply smoothing to the previously found path
	local smoothed_length, smoothed_path = pathfinder.smooth_path(smooth_id, path)

	print("Smoothed path length:", smoothed_length)
	for i, waypoint in ipairs(smoothed_path) do
		print(string.format("Smoothed waypoint %d: (%.1f, %.1f)", i, waypoint.x, waypoint.y))
	end

	-- Example 3: Automatic path smoothing
	-- Pass the smooth_id to find_path to get a smoothed path directly
	path_length, status, status_text, path = pathfinder.find_node_to_node(start_id, goal_id, 32, smooth_id)

	if status == pathfinder.PathStatus.SUCCESS then
		print("Smoothed path found with", path_length, "waypoints")
		for i, waypoint in ipairs(path) do
			print(string.format("Waypoint %d: (%.1f, %.1f)", i, waypoint.x, waypoint.y))
		end
	else
		print("Pathfinding failed:", status_text)
	end

	-- Example 4: Projected pathfinding without smoothing
	-- Find a path from an arbitrary point (55, 45) to the goal node
	-- The pathfinder will create a temporary entry point on the graph
	path_length, status, status_text, entry_point, path = pathfinder.find_projected_to_node(55, 45, goal_id, 8)

	if status == pathfinder.PathStatus.SUCCESS then
		print("Entry point:", entry_point)
		print("Projected path found with", path_length, "waypoints")
		for i, waypoint in ipairs(path) do
			print(string.format("Waypoint %d: (%.1f, %.1f)", i, waypoint.x, waypoint.y))
		end
	else
		print("Pathfinding failed:", status_text)
	end

	-- Example 5: Projected pathfinding with smoothing
	-- Combine projected pathfinding with automatic smoothing
	path_length, status, status_text, entry_point, path = pathfinder.find_projected_to_node(0, 0, goal_id, 64, smooth_id)

	if status == pathfinder.PathStatus.SUCCESS then
		print("Entry point:", entry_point)
		print("Smoothed projected path found with", path_length, "waypoints")
		for i, waypoint in ipairs(path) do
			print(string.format("Waypoint %d: (%.1f, %.1f)", i, waypoint.x, waypoint.y))
		end
	else
		print("Pathfinding failed:", status_text)
	end


	-- Example 5: Projected pathfinding with smoothing
	-- Combine projected pathfinding with automatic smoothing
	path_length, status, status_text, exit_point, path = pathfinder.find_node_to_projected(start_id, 55, 45, 32, smooth_id)

	if status == pathfinder.PathStatus.SUCCESS then
		print("Exit point:", exit_point)
		print("Smoothed projected path found with", path_length, "waypoints")
		for i, waypoint in ipairs(path) do
			print(string.format("Waypoint %d: (%.1f, %.1f)", i, waypoint.x, waypoint.y))
		end
	else
		print("Pathfinding failed:", status_text)
	end


	-- Example 5: Projected pathfinding with smoothing
	-- Combine projected pathfinding with automatic smoothing
	path_length, status, status_text, entry_point, exit_point, path = pathfinder.find_projected_to_projected(55, 45, 355, 345, 32, smooth_id)

	if status == pathfinder.PathStatus.SUCCESS then
		print("Entry point:", entry_point)
		print("Exit point:", exit_point)
		print("Smoothed projected path found with", path_length, "waypoints")
		for i, waypoint in ipairs(path) do
			print(string.format("Waypoint %d: (%.1f, %.1f)", i, waypoint.x, waypoint.y))
		end
	else
		print("Pathfinding failed:", status_text)
	end

	local result = pathfinder.get_node_edges(start_id, true, true)
	pprint(result)
end
