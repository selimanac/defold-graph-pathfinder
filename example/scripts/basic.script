local path_length = 0
local status = 0
local status_text = ""
local entry_point = vmath.vector3()
local path = {}

local start_id = 0
local goal_id = 0

-- Smoothing configuration
local smooth_config = {
	style = pathfinder.PathSmoothStyle.BEZIER_QUADRATIC,
	bezier_sample_segment = 8,
	bezier_curve_radius = 0.8
}

function init(self)
	-- Initialize pathfinder
	pathfinder.init(32, nil, 4, 32, 4)

	-- Create nodes
	local nodes = pathfinder.add_nodes({
		{ x = 100, y = 100 },
		{ x = 200, y = 200 },
		{ x = 300, y = 200 },
		{ x = 400, y = 100 }
	})

	-- Create edges
	pathfinder.add_edges({
		{ from_node_id = nodes[1], to_node_id = nodes[2], bidirectional = true },
		{ from_node_id = nodes[2], to_node_id = nodes[3], bidirectional = true },
		{ from_node_id = nodes[3], to_node_id = nodes[4], bidirectional = true }
	})

	-- Find path
	start_id = nodes[1]
	goal_id = nodes[4]
	path_length, status, status_text, path = pathfinder.find_path(start_id, goal_id, 8)

	if status == pathfinder.PathStatus.SUCCESS then
		print("Path found with", path_length, "waypoints")
		for i, waypoint in ipairs(path) do
			print(string.format("Waypoint %d: (%.1f, %.1f)", i, waypoint.x, waypoint.y))
		end
	else
		print("Pathfinding failed:", status_text)
	end

	-- Add Smoothing configuration
	local smooth_id = pathfinder.add_path_smoothing(smooth_config)

	-- Manualy smooth the path
	local smoothed_length, smoothed_path = pathfinder.smooth_path(smooth_id, path)

	print(smoothed_length)
	pprint(smoothed_path)


	-- Find path with smoothing
	path_length, status, status_text, path = pathfinder.find_path(start_id, goal_id, 32, smooth_id)

	if status == pathfinder.PathStatus.SUCCESS then
		print("Path found with", path_length, "waypoints")
		for i, waypoint in ipairs(path) do
			print(string.format("Waypoint %d: (%.1f, %.1f)", i, waypoint.x, waypoint.y))
		end
	else
		print("Pathfinding failed:", status_text)
	end

	-- Find projected path
	path_length, status, status_text, entry_point, path = pathfinder.find_projected_path(55, 45, goal_id, 8)

	if status == pathfinder.PathStatus.SUCCESS then
		print("Entry Point: ", entry_point)
		print("Path found with", path_length, "waypoints")
		for i, waypoint in ipairs(path) do
			print(string.format("Waypoint %d: (%.1f, %.1f)", i, waypoint.x, waypoint.y))
		end
	else
		print("Pathfinding failed:", status_text)
	end

	-- Find projected path with smoothing
	path_length, status, status_text, entry_point, path = pathfinder.find_projected_path(0, 0, goal_id, 64, smooth_id)

	if status == pathfinder.PathStatus.SUCCESS then
		print("Entry Point: ", entry_point)
		print("Path found with", path_length, "waypoints")
		pprint(path)
		--[[for i, waypoint in ipairs(path) do
			print(string.format("Waypoint %d: (%.1f, %.1f)", i, waypoint.x, waypoint.y))
		end]]
	else
		print("Pathfinding failed:", status_text)
	end
end
